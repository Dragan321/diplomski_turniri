// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DiplomskiTurniriContext))]
    [Migration("20231023142332_dodataPojleSlikaIgracu")]
    partial class dodataPojleSlikaIgracu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimoviUcestvujuUTurnirima", b =>
                {
                    b.Property<int>("IdTima")
                        .HasColumnType("int")
                        .HasColumnName("ID_TIMA");

                    b.Property<int>("IdTurnira")
                        .HasColumnType("int")
                        .HasColumnName("ID_TURNIRA");

                    b.HasKey("IdTima", "IdTurnira")
                        .HasName("PK_TIMOVI_UCESTVUJU_U_TURNIRIM");

                    b.HasIndex(new[] { "IdTurnira" }, "TIMOVI_UCESTVUJU_U_TURNIRIMA2_FK");

                    b.HasIndex(new[] { "IdTima" }, "TIMOVI_UCESTVUJU_U_TURNIRIMA_FK");

                    b.ToTable("TIMOVI_UCESTVUJU_U_TURNIRIMA", (string)null);
                });

            modelBuilder.Entity("backend.Models.Go", b =>
                {
                    b.Property<int>("IdGola")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_GOLA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGola"));

                    b.Property<int?>("IdIgraca")
                        .HasColumnType("int")
                        .HasColumnName("ID_IGRACA");

                    b.Property<int?>("IdMeca")
                        .HasColumnType("int")
                        .HasColumnName("ID_MECA");

                    b.Property<int?>("IdTima")
                        .HasColumnType("int")
                        .HasColumnName("ID_TIMA");

                    b.Property<int>("Minut")
                        .HasColumnType("int")
                        .HasColumnName("MINUT");

                    b.HasKey("IdGola");

                    b.HasIndex(new[] { "IdMeca" }, "GOLOVI_U_MECU_FK");

                    b.HasIndex(new[] { "IdIgraca" }, "IGRAC_DAO_GO_FK");

                    b.HasIndex(new[] { "IdTima" }, "TIM_DAO_GO_FK");

                    b.ToTable("GO", (string)null);
                });

            modelBuilder.Entity("backend.Models.Igrac", b =>
                {
                    b.Property<int>("IdIgraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_IGRACA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIgraca"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime")
                        .HasColumnName("DATUM_RODJENJA");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("IdTima")
                        .HasColumnType("int")
                        .HasColumnName("ID_TIMA");

                    b.Property<string>("ImeIgraca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IME_IGRACA");

                    b.Property<string>("slika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdIgraca");

                    b.HasIndex(new[] { "IdTima" }, "IGRAC_IGRA_ZA_TIM_FK");

                    b.HasIndex(new[] { "Email" }, "KORISNIK_POSJEDUJE_IGRACE_FK");

                    b.ToTable("IGRAC", (string)null);
                });

            modelBuilder.Entity("backend.Models.Korisnik", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IME");

                    b.HasKey("Email");

                    b.ToTable("KORISNIK", (string)null);
                });

            modelBuilder.Entity("backend.Models.Mec", b =>
                {
                    b.Property<int>("IdMeca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MECA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMeca"));

                    b.Property<int>("BrGolovaTim1")
                        .HasColumnType("int")
                        .HasColumnName("BR_GOLOVA_TIM_1");

                    b.Property<int>("BrGolovaTim2")
                        .HasColumnType("int")
                        .HasColumnName("BR_GOLOVA_TIM_2");

                    b.Property<int?>("IdRunde")
                        .HasColumnType("int")
                        .HasColumnName("ID_RUNDE");

                    b.Property<int?>("IdTima")
                        .HasColumnType("int")
                        .HasColumnName("ID_TIMA");

                    b.Property<int?>("TimIdTima")
                        .HasColumnType("int")
                        .HasColumnName("TIM_ID_TIMA");

                    b.Property<int?>("TimIdTima2")
                        .HasColumnType("int")
                        .HasColumnName("TIM_ID_TIMA2");

                    b.HasKey("IdMeca");

                    b.HasIndex(new[] { "IdRunde" }, "MECEVI_U_RUNDI_FK");

                    b.HasIndex(new[] { "TimIdTima2" }, "POBJEDNIK_FK");

                    b.HasIndex(new[] { "TimIdTima" }, "TIM1_FK");

                    b.HasIndex(new[] { "IdTima" }, "TIM2_FK");

                    b.ToTable("MEC", (string)null);
                });

            modelBuilder.Entity("backend.Models.Runde", b =>
                {
                    b.Property<int>("IdRunde")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RUNDE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRunde"));

                    b.Property<int?>("IdTurnira")
                        .HasColumnType("int")
                        .HasColumnName("ID_TURNIRA");

                    b.Property<int>("Runda")
                        .HasColumnType("int")
                        .HasColumnName("RUNDA");

                    b.HasKey("IdRunde");

                    b.HasIndex(new[] { "IdTurnira" }, "RUNDE_TURNIRA_FK");

                    b.ToTable("RUNDE", (string)null);
                });

            modelBuilder.Entity("backend.Models.Tim", b =>
                {
                    b.Property<int>("IdTima")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIMA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTima"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOGO");

                    b.Property<string>("NazivTima")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAZIV_TIMA");

                    b.HasKey("IdTima");

                    b.HasIndex(new[] { "Email" }, "KORISNIK_POSJEDUJE_TIMOVE_FK");

                    b.ToTable("TIM", (string)null);
                });

            modelBuilder.Entity("backend.Models.Turnir", b =>
                {
                    b.Property<int>("IdTurnira")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TURNIRA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTurnira"));

                    b.Property<DateTime>("DatumOdrzavanja")
                        .HasColumnType("datetime")
                        .HasColumnName("DATUM_ODRZAVANJA");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("LokacijaOdrzavanja")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("LOKACIJA_ODRZAVANJA");

                    b.Property<string>("NazivTurnira")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAZIV_TURNIRA");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("STATUS");

                    b.HasKey("IdTurnira");

                    b.HasIndex(new[] { "Email" }, "KORISNIK_POSJEDUJE_TURNIRE_FK");

                    b.ToTable("TURNIR", (string)null);
                });

            modelBuilder.Entity("TimoviUcestvujuUTurnirima", b =>
                {
                    b.HasOne("backend.Models.Tim", null)
                        .WithMany()
                        .HasForeignKey("IdTima")
                        .IsRequired()
                        .HasConstraintName("FK_TIMOVI_U_TIMOVI_UC_TIM");

                    b.HasOne("backend.Models.Turnir", null)
                        .WithMany()
                        .HasForeignKey("IdTurnira")
                        .IsRequired()
                        .HasConstraintName("FK_TIMOVI_U_TIMOVI_UC_TURNIR");
                });

            modelBuilder.Entity("backend.Models.Go", b =>
                {
                    b.HasOne("backend.Models.Igrac", "IdIgracaNavigation")
                        .WithMany("Gos")
                        .HasForeignKey("IdIgraca")
                        .HasConstraintName("FK_GO_IGRAC_DAO_IGRAC");

                    b.HasOne("backend.Models.Mec", "IdMecaNavigation")
                        .WithMany("Gos")
                        .HasForeignKey("IdMeca")
                        .HasConstraintName("FK_GO_GOLOVI_U__MEC");

                    b.HasOne("backend.Models.Tim", "IdTimaNavigation")
                        .WithMany("Gos")
                        .HasForeignKey("IdTima")
                        .HasConstraintName("FK_GO_TIM_DAO_G_TIM");

                    b.Navigation("IdIgracaNavigation");

                    b.Navigation("IdMecaNavigation");

                    b.Navigation("IdTimaNavigation");
                });

            modelBuilder.Entity("backend.Models.Igrac", b =>
                {
                    b.HasOne("backend.Models.Korisnik", "EmailNavigation")
                        .WithMany("Igracs")
                        .HasForeignKey("Email")
                        .HasConstraintName("FK_IGRAC_KORISNIK__KORISNIK");

                    b.HasOne("backend.Models.Tim", "IdTimaNavigation")
                        .WithMany("Igracs")
                        .HasForeignKey("IdTima")
                        .HasConstraintName("FK_IGRAC_IGRAC_IGR_TIM");

                    b.Navigation("EmailNavigation");

                    b.Navigation("IdTimaNavigation");
                });

            modelBuilder.Entity("backend.Models.Mec", b =>
                {
                    b.HasOne("backend.Models.Runde", "IdRundeNavigation")
                        .WithMany("Mecs")
                        .HasForeignKey("IdRunde")
                        .HasConstraintName("FK_MEC_MECEVI_U__RUNDE");

                    b.HasOne("backend.Models.Tim", "IdTimaNavigation")
                        .WithMany("MecIdTimaNavigations")
                        .HasForeignKey("IdTima")
                        .HasConstraintName("FK_MEC_TIM2_TIM");

                    b.HasOne("backend.Models.Tim", "TimIdTimaNavigation")
                        .WithMany("MecTimIdTimaNavigations")
                        .HasForeignKey("TimIdTima")
                        .HasConstraintName("FK_MEC_TIM1_TIM");

                    b.HasOne("backend.Models.Tim", "TimIdTima2Navigation")
                        .WithMany("MecTimIdTima2Navigations")
                        .HasForeignKey("TimIdTima2")
                        .HasConstraintName("FK_MEC_POBJEDNIK_TIM");

                    b.Navigation("IdRundeNavigation");

                    b.Navigation("IdTimaNavigation");

                    b.Navigation("TimIdTima2Navigation");

                    b.Navigation("TimIdTimaNavigation");
                });

            modelBuilder.Entity("backend.Models.Runde", b =>
                {
                    b.HasOne("backend.Models.Turnir", "IdTurniraNavigation")
                        .WithMany("Rundes")
                        .HasForeignKey("IdTurnira")
                        .HasConstraintName("FK_RUNDE_RUNDE_TUR_TURNIR");

                    b.Navigation("IdTurniraNavigation");
                });

            modelBuilder.Entity("backend.Models.Tim", b =>
                {
                    b.HasOne("backend.Models.Korisnik", "EmailNavigation")
                        .WithMany("Tims")
                        .HasForeignKey("Email")
                        .HasConstraintName("FK_TIM_KORISNIK__KORISNIK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("backend.Models.Turnir", b =>
                {
                    b.HasOne("backend.Models.Korisnik", "EmailNavigation")
                        .WithMany("Turnirs")
                        .HasForeignKey("Email")
                        .HasConstraintName("FK_TURNIR_KORISNIK__KORISNIK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("backend.Models.Igrac", b =>
                {
                    b.Navigation("Gos");
                });

            modelBuilder.Entity("backend.Models.Korisnik", b =>
                {
                    b.Navigation("Igracs");

                    b.Navigation("Tims");

                    b.Navigation("Turnirs");
                });

            modelBuilder.Entity("backend.Models.Mec", b =>
                {
                    b.Navigation("Gos");
                });

            modelBuilder.Entity("backend.Models.Runde", b =>
                {
                    b.Navigation("Mecs");
                });

            modelBuilder.Entity("backend.Models.Tim", b =>
                {
                    b.Navigation("Gos");

                    b.Navigation("Igracs");

                    b.Navigation("MecIdTimaNavigations");

                    b.Navigation("MecTimIdTima2Navigations");

                    b.Navigation("MecTimIdTimaNavigations");
                });

            modelBuilder.Entity("backend.Models.Turnir", b =>
                {
                    b.Navigation("Rundes");
                });
#pragma warning restore 612, 618
        }
    }
}
